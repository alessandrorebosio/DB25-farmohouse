DROP DATABASE IF EXISTS farmhouse;
CREATE DATABASE farmhouse;
USE farmhouse;

CREATE TABLE PERSON (
    cf VARCHAR(16) PRIMARY KEY,
    name VARCHAR(32) NOT NULL,
    surname VARCHAR(32) NOT NULL
);

CREATE TABLE USER (
    username VARCHAR(32) PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    cf VARCHAR(16) UNIQUE NOT NULL,
    FOREIGN KEY (cf) REFERENCES PERSON(cf)
);

CREATE TABLE EMPLOYEE (
    username VARCHAR(32) PRIMARY KEY,
    role VARCHAR(32) NOT NULL,
    FOREIGN KEY (username) REFERENCES USER(username)
);

CREATE TABLE EMPLOYEE_HISTORY (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(32) NOT NULL,
    role VARCHAR(32) NOT NULL,
    change_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (username) REFERENCES EMPLOYEE(username)
);

CREATE TABLE SHIFT (
    id INT AUTO_INCREMENT PRIMARY KEY,
    day ENUM('MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN') NOT NULL,
    shift_name VARCHAR(32) NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL
);

CREATE TABLE EMPLOYEE_SHIFT (
    id INT AUTO_INCREMENT PRIMARY KEY,
    employee_username VARCHAR(32) NOT NULL,
    shift_id INT NOT NULL,
    shift_date DATE NOT NULL,
    status ENUM('SCHEDULED', 'COMPLETED', 'ABSENT') DEFAULT 'SCHEDULED',
    FOREIGN KEY (employee_username) REFERENCES EMPLOYEE(username),
    FOREIGN KEY (shift_id) REFERENCES SHIFT(id),
    UNIQUE KEY unique_employee_shift (employee_username, shift_date)
);

CREATE TABLE ORDERS (
    id INT AUTO_INCREMENT PRIMARY KEY,
    date DATETIME DEFAULT CURRENT_TIMESTAMP,
    username VARCHAR(32) NOT NULL,
    FOREIGN KEY (username) REFERENCES USER(username)
);

CREATE TABLE PRODUCT (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT NOT NULL,
    price DECIMAL(8,2) NOT NULL CHECK (price > 0)
);

CREATE TABLE ORDER_DETAIL (
    `order` INT NOT NULL,
    product INT NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL(8,2) NOT NULL CHECK (unit_price > 0),
    PRIMARY KEY (`order`, product),
    FOREIGN KEY (product) REFERENCES PRODUCT(id),
    FOREIGN KEY (`order`) REFERENCES ORDERS(id)
);

CREATE TABLE EVENT (
    id INT AUTO_INCREMENT PRIMARY KEY,
    seats INT NOT NULL CHECK (seats > 0),
    title VARCHAR(100) NOT NULL,
    description TEXT NOT NULL,
    event_date DATE NOT NULL,
    created_by VARCHAR(32) NOT NULL,
    FOREIGN KEY (created_by) REFERENCES EMPLOYEE(username)
);

CREATE TABLE EVENT_SUBSCRIPTION (
    event INT NOT NULL,
    user VARCHAR(32) NOT NULL,
    subscription_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    participants INT NOT NULL CHECK (participants > 0),
    PRIMARY KEY (event, user),
    FOREIGN KEY (event) REFERENCES EVENT(id),
    FOREIGN KEY (user) REFERENCES USER(username)
);

CREATE TABLE RESERVATION (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(32) NOT NULL,
    reservation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (username) REFERENCES USER(username)
);


CREATE TABLE SERVICE (
    id INT AUTO_INCREMENT PRIMARY KEY,
    price DECIMAL(8,2) NOT NULL CHECK (price >= 0),
    type ENUM('RESTAURANT', 'POOL', 'PLAYGROUND', 'ROOM') NOT NULL,
    status ENUM('AVAILABLE', 'OCCUPIED', 'MAINTENANCE') NOT NULL DEFAULT 'AVAILABLE'
);

CREATE TABLE RESERVATION_DETAIL (
    reservation INT NOT NULL,
    service INT NOT NULL,
    start_date DATETIME NOT NULL,
    end_date DATETIME NOT NULL,
    people INT NOT NULL CHECK (people > 0),
    CHECK (start_date <= end_date),
    PRIMARY KEY (reservation, service),
    FOREIGN KEY (reservation) REFERENCES RESERVATION(id),
    FOREIGN KEY (service) REFERENCES SERVICE(id)
);

CREATE TABLE RESTAURANT (
    service INT PRIMARY KEY,
    code VARCHAR(3) UNIQUE NOT NULL,
    max_capacity INT NOT NULL CHECK (max_capacity > 0),
    FOREIGN KEY (service) REFERENCES SERVICE(id)
);

CREATE TABLE ROOM (
    service INT PRIMARY KEY,
    code VARCHAR(3) UNIQUE NOT NULL,
    max_capacity INT NOT NULL CHECK (max_capacity > 0),
    FOREIGN KEY (service) REFERENCES SERVICE(id)
);
